<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RM - 01 ÁõëÊéßÈù¢Êùø</title>
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="RM - 01 ÁõëÊéßÈù¢Êùø">
    <link rel="apple-touch-icon" href="apple-touch-icon.png">
    <link rel="icon" href="favicon.ico" type="image/x-icon">
    <link rel="icon" href="favicon.png" type="image/png">
    <link rel="shortcut icon" href="favicon.ico" type="image/x-icon">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #59d5f6 0%, #c386f4 50%, #ff9fc1 100%);
            min-height: 100vh;
            color: #333;
        }
        

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .connection-status {
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            color: white;
            text-align: center;
        }

        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .status-connected { background-color: #4CAF50; }
        .status-connecting { background-color: #FF9800; }
        .status-disconnected { background-color: #f44336; }

        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }

        .card {
            background: rgba(255,255,255,0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.18);
        }

        .card-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 2px solid #eee;
        }

        .card-icon {
            font-size: 1.5rem;
            margin-right: 10px;
        }

        .card-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #2c3e50;
        }

        .metric {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 10px 0;
            padding: 8px 0;
        }

        .metric-label {
            font-weight: 500;
            color: #555;
        }

        .metric-value {
            font-weight: 600;
            color: #2c3e50;
        }

        .progress-bar {
            width: 100%;
            height: 20px;
            background-color: #e0e0e0;
            border-radius: 10px;
            overflow: hidden;
            margin: 5px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4CAF50, #45a049);
            border-radius: 10px;
            transition: width 0.3s ease;
            text-align: center;
            line-height: 20px;
            color: white;
            font-size: 12px;
            font-weight: bold;
        }

        .cpu-cores {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
            gap: 8px;
            margin-top: 10px;
        }

        .cpu-core {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 8px;
            text-align: center;
            border: 1px solid #e9ecef;
        }

        .cpu-core-id {
            font-size: 0.8rem;
            color: #666;
            margin-bottom: 2px;
        }

        .cpu-core-usage {
            font-weight: bold;
            color: #2c3e50;
        }

        .cpu-core-freq {
            font-size: 0.7rem;
            color: #888;
        }

        .temperature-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 10px;
        }

        .lpmu-temperature-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 8px;
            margin-top: 10px;
        }

        .disk-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            margin-top: 10px;
        }

        .disk-item {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 12px;
            text-align: center;
            border: 1px solid #e9ecef;
        }

        .disk-label {
            font-size: 0.85rem;
            color: #666;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .disk-usage {
            font-size: 1.1rem;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 4px;
        }

        .disk-details {
            font-size: 0.75rem;
            color: #888;
        }

        .temp-item {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 10px;
            text-align: center;
            border: 1px solid #e9ecef;
        }

        .temp-label {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 5px;
        }

        .temp-value {
            font-size: 1.1rem;
            font-weight: bold;
            color: #2c3e50;
        }

        .no-data {
            text-align: center;
            color: #888;
            font-style: italic;
            padding: 20px;
        }

        .system-section {
            margin-bottom: 40px;
        }

        .system-header {
            background: rgba(255,255,255,0.15);
            backdrop-filter: blur(10px);
            border-radius: 10px;
            padding: 15px 20px;
            margin-bottom: 20px;
            color: white;
            text-align: center;
            border: 1px solid rgba(255,255,255,0.2);
        }

        .system-header h2 {
            margin: 0;
            font-size: 1.5rem;
            font-weight: 600;
        }

        .system-header p {
            margin: 5px 0 0 0;
            opacity: 0.9;
            font-size: 0.9rem;
        }

        .lpmu-dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }

        .lpmu-row-1 {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            grid-column: 1 / -1;
        }

        .lpmu-row-2 {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            grid-column: 1 / -1;
        }

        .lpmu-full-width {
            grid-column: 1 / -1;
        }

        @media (max-width: 1200px) {
            .lpmu-temperature-grid {
                grid-template-columns: repeat(3, 1fr);
            }
            
            .disk-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .header h1 {
                font-size: 1.8rem;
            }
            
            .dashboard {
                grid-template-columns: 1fr;
            }

            .lpmu-dashboard,
            .lpmu-row-1,
            .lpmu-row-2 {
                grid-template-columns: 1fr;
            }

            .temperature-grid {
                grid-template-columns: 1fr;
            }

            .lpmu-temperature-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .disk-grid {
                grid-template-columns: 1fr;
            }

            .system-header h2 {
                font-size: 1.3rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>RM - 01 Dashboard</h1>
            <p>RobOS ( Rack on board ) ÂÆûÊó∂Á≥ªÁªüÊÄßËÉΩÁõëÊéßÈù¢Êùø</p>
        </div>

        <div class="connection-status">
            <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 10px;">
                <div>
                    <span class="status-indicator status-connecting" id="agxStatusIndicator"></span>
                    <span id="agxStatusText">Ê≠£Âú®ËøûÊé•Âà∞ Êé®ÁêÜÊúçÂä°Âô®...</span>
                </div>
                <div>
                    <span class="status-indicator status-connecting" id="lpmuStatusIndicator"></span>
                    <span id="lpmuStatusText">Ê≠£Âú®ËøûÊé•Âà∞ Â∫îÁî®ÊúçÂä°Âô®...</span>
                </div>
            </div>
        </div>

        <!-- Êé®ÁêÜÊúçÂä°Âô® ÁõëÊéßÈÉ®ÂàÜ -->
        <div class="system-section">
            <div class="system-header">
                <h2>üñ•Ô∏è Êé®ÁêÜÊ®°ÁªÑÁõëÊéß</h2>
                <p>NVIDIA Êé®ÁêÜÊúçÂä°Âô®Á≥ªÁªüÁä∂ÊÄÅ</p>
            </div>
            
            <div class="dashboard">
                <!-- Êé®ÁêÜÊúçÂä°Âô® CPU ÁõëÊéßÂç°Áâá -->
                <div class="card">
                    <div class="card-header">
                        <div class="card-icon"> </div>
                        <div class="card-title">CPU ÁõëÊéß</div>
                    </div>
                    <div id="cpuContent">
                        <div class="no-data">Á≠âÂæÖÊï∞ÊçÆ...</div>
                    </div>
                </div>

                <!-- Êé®ÁêÜÊúçÂä°Âô® ÂÜÖÂ≠òÁõëÊéßÂç°Áâá -->
                <div class="card">
                    <div class="card-header">
                        <div class="card-icon"> </div>
                        <div class="card-title">ÊòæÂ≠òÁõëÊéß</div>
                    </div>
                    <div id="memoryContent">
                        <div class="no-data">Á≠âÂæÖÊï∞ÊçÆ...</div>
                    </div>
                </div>

                <!-- Êé®ÁêÜÊúçÂä°Âô® Ê∏©Â∫¶ÁõëÊéßÂç°Áâá -->
                <div class="card">
                    <div class="card-header">
                        <div class="card-icon"> </div>
                        <div class="card-title">Ê∏©Â∫¶ÁõëÊéß</div>
                    </div>
                    <div id="temperatureContent">
                        <div class="no-data">Á≠âÂæÖÊï∞ÊçÆ...</div>
                    </div>
                </div>

                <!-- Êé®ÁêÜÊúçÂä°Âô® ÂäüËÄóÁõëÊéßÂç°Áâá -->
                <div class="card">
                    <div class="card-header">
                        <div class="card-icon"> </div>
                        <div class="card-title">ÂäüËÄóÁõëÊéß</div>
                    </div>
                    <div id="powerContent">
                        <div class="no-data">Á≠âÂæÖÊï∞ÊçÆ...</div>
                    </div>
                </div>

                <!-- Êé®ÁêÜÊúçÂä°Âô® GPU ÁõëÊéßÂç°Áâá -->
                <div class="card">
                    <div class="card-header">
                        <div class="card-icon"> </div>
                        <div class="card-title">GPU ÁõëÊéß</div>
                    </div>
                    <div id="gpuContent">
                        <div class="no-data">Á≠âÂæÖÊï∞ÊçÆ...</div>
                    </div>
                </div>

                <!-- Êé®ÁêÜÊúçÂä°Âô® Á≥ªÁªü‰ø°ÊÅØÂç°Áâá -->
                <div class="card">
                    <div class="card-header">
                        <div class="card-icon"> </div>
                        <div class="card-title">Á≥ªÁªü‰ø°ÊÅØ</div>
                    </div>
                    <div id="systemContent">
                        <div class="metric">
                            <span class="metric-label">ÊúÄÂêéÊõ¥Êñ∞</span>
                            <span class="metric-value" id="lastUpdate">-</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">ËøûÊé•Êó∂Èó¥</span>
                            <span class="metric-value" id="connectionTime">-</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">Êï∞ÊçÆÂåÖ</span>
                            <span class="metric-value" id="dataPackets">0</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- LattePanda Mu ÁõëÊéßÈÉ®ÂàÜ -->
        <div class="system-section">
            <div class="system-header">
                <h2>üñ•Ô∏è Â∫îÁî®Ê®°ÁªÑÁõëÊéß</h2>
                <p>Intel X86 Â∫îÁî®ÊúçÂä°Âô®Á≥ªÁªüÁä∂ÊÄÅ</p>
            </div>
            
            <div class="lpmu-dashboard">
                <!-- Á¨¨‰∏ÄË°åÔºöCPU„ÄÅÂÜÖÂ≠ò„ÄÅÁ≥ªÁªü‰ø°ÊÅØ -->
                <div class="lpmu-row-1">
                    <!-- Â∫îÁî®ÊúçÂä°Âô® CPU ÁõëÊéßÂç°Áâá -->
                    <div class="card">
                        <div class="card-header">
                            <div class="card-icon"> </div>
                            <div class="card-title">CPU ÁõëÊéß</div>
                        </div>
                        <div id="lpmuCpuContent">
                            <div class="no-data">Á≠âÂæÖÊï∞ÊçÆ...</div>
                        </div>
                    </div>

                    <!-- Â∫îÁî®ÊúçÂä°Âô® ÂÜÖÂ≠òÁõëÊéßÂç°Áâá -->
                    <div class="card">
                        <div class="card-header">
                            <div class="card-icon"> </div>
                            <div class="card-title">ÂÜÖÂ≠òÁõëÊéß</div>
                        </div>
                        <div id="lpmuMemoryContent">
                            <div class="no-data">Á≠âÂæÖÊï∞ÊçÆ...</div>
                        </div>
                    </div>

                    <!-- Â∫îÁî®ÊúçÂä°Âô® Á≥ªÁªü‰ø°ÊÅØÂç°Áâá -->
                    <div class="card">
                        <div class="card-header">
                            <div class="card-icon"> </div>
                            <div class="card-title">Á≥ªÁªü‰ø°ÊÅØ</div>
                        </div>
                        <div id="lpmuSystemContent">
                            <div class="metric">
                                <span class="metric-label">ÊúÄÂêéÊõ¥Êñ∞</span>
                                <span class="metric-value" id="lpmuLastUpdate">-</span>
                            </div>
                            <div class="metric">
                                <span class="metric-label">ËøûÊé•Êó∂Èó¥</span>
                                <span class="metric-value" id="lpmuConnectionTime">-</span>
                            </div>
                            <div class="metric">
                                <span class="metric-label">Êï∞ÊçÆÂåÖ</span>
                                <span class="metric-value" id="lpmuDataPackets">0</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Á¨¨‰∫åË°åÔºöÊ∏©Â∫¶ÁõëÊéß -->
                <div class="lpmu-row-2">
                    <!-- Â∫îÁî®ÊúçÂä°Âô® Ê∏©Â∫¶ÁõëÊéßÂç°Áâá -->
                    <div class="card lpmu-full-width">
                        <div class="card-header">
                            <div class="card-icon"> </div>
                            <div class="card-title">Ê∏©Â∫¶ÁõëÊéß</div>
                        </div>
                        <div id="lpmuTemperatureContent">
                            <div class="no-data">Á≠âÂæÖÊï∞ÊçÆ...</div>
                        </div>
                    </div>
                </div>

                <!-- Á¨¨‰∏âË°åÔºöÁ£ÅÁõòÁõëÊéß -->
                <div class="lpmu-row-2">
                    <!-- Â∫îÁî®ÊúçÂä°Âô® Á£ÅÁõòÁõëÊéßÂç°Áâá -->
                    <div class="card lpmu-full-width">
                        <div class="card-header">
                            <div class="card-icon"> </div>
                            <div class="card-title">Á£ÅÁõòÁõëÊéß</div>
                        </div>
                        <div id="lpmuDiskContent">
                            <div class="no-data">Á≠âÂæÖÊï∞ÊçÆ...</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // WebSocket ËøûÊé•ÁÆ°ÁêÜ
        class Êé®ÁêÜÊúçÂä°Âô®Monitor {
            constructor() {
                this.ws = null;
                this.reconnectInterval = 3000;
                this.maxReconnectAttempts = 5;
                this.reconnectAttempts = 0;
                this.connectionStartTime = null;
                this.dataPacketCount = 0;
                this.isConnecting = false;
                
                this.init();
            }

            init() {
                this.connect();
                this.startConnectionTimeUpdate();
            }

            connect() {
                if (this.isConnecting) return;
                
                this.isConnecting = true;
                this.updateConnectionStatus('connecting', 'Ê≠£Âú®ËøûÊé•Âà∞ Êé®ÁêÜÊúçÂä°Âô®...');

                try {
                    // ËøûÊé•Âà∞ Êé®ÁêÜÊúçÂä°Âô® ÊúçÂä°Âô®ÁöÑ WebSocket
                    this.ws = new WebSocket('ws://10.10.99.98:58090/socket.io/?EIO=4&transport=websocket');
                    
                    this.ws.onopen = () => {
                        console.log('WebSocket ËøûÊé•Â∑≤Âª∫Á´ã');
                        this.isConnecting = false;
                        this.reconnectAttempts = 0;
                        this.connectionStartTime = new Date();
                        this.updateConnectionStatus('connected', 'Â∑≤ËøûÊé•Âà∞ Êé®ÁêÜÊúçÂä°Âô® ÊúçÂä°Âô®');
                        
                        // ÂèëÈÄÅÂàùÂßãËøûÊé•Ê∂àÊÅØ (Socket.IO Êè°Êâã)
                        this.ws.send('40');
                    };

                    this.ws.onmessage = (event) => {
                        this.handleMessage(event.data);
                    };

                    this.ws.onclose = (event) => {
                        console.log('WebSocket ËøûÊé•Â∑≤ÂÖ≥Èó≠:', event.code, event.reason);
                        this.isConnecting = false;
                        this.connectionStartTime = null;
                        this.updateConnectionStatus('disconnected', 'ËøûÊé•Â∑≤Êñ≠ÂºÄ');
                        this.scheduleReconnect();
                    };

                    this.ws.onerror = (error) => {
                        console.error('WebSocket ÈîôËØØ:', error);
                        this.isConnecting = false;
                        this.updateConnectionStatus('disconnected', 'ËøûÊé•ÈîôËØØ');
                    };

                } catch (error) {
                    console.error('ËøûÊé•Â§±Ë¥•:', error);
                    this.isConnecting = false;
                    this.updateConnectionStatus('disconnected', 'ËøûÊé•Â§±Ë¥•');
                    this.scheduleReconnect();
                }
            }

            handleMessage(data) {
                console.log('Êî∂Âà∞Ê∂àÊÅØ:', data);
                
                // Â§ÑÁêÜ Socket.IO Ê∂àÊÅØÊ†ºÂºè
                if (data.startsWith('42')) {
                    try {
                        // Ëß£Êûê Socket.IO Êï∞ÊçÆÂåÖ
                        const jsonData = data.substring(2);
                        const parsed = JSON.parse(jsonData);
                        
                        if (parsed[0] === 'tegrastats_update' && parsed[1]) {
                            this.dataPacketCount++;
                            this.updateSystemData(parsed[1]);
                        }
                    } catch (error) {
                        console.error('Ëß£ÊûêÊ∂àÊÅØÂ§±Ë¥•:', error);
                    }
                } else if (data === '40') {
                    // Socket.IO Êè°ÊâãÁ°ÆËÆ§
                    console.log('Socket.IO Êè°ÊâãÂÆåÊàê');
                } else if (data.startsWith('2')) {
                    // Ping frame - ÂõûÂ§ç pong
                    this.ws.send('3');
                }
            }

            updateSystemData(data) {
                console.log('Êõ¥Êñ∞Á≥ªÁªüÊï∞ÊçÆ:', data);
                
                // Êõ¥Êñ∞ CPU Êï∞ÊçÆ
                this.updateCPUDisplay(data.cpu);
                
                // Êõ¥Êñ∞ÂÜÖÂ≠òÊï∞ÊçÆ
                this.updateMemoryDisplay(data.memory);
                
                // Êõ¥Êñ∞Ê∏©Â∫¶Êï∞ÊçÆ
                this.updateTemperatureDisplay(data.temperature);
                
                // Êõ¥Êñ∞ÂäüËÄóÊï∞ÊçÆ
                this.updatePowerDisplay(data.power);
                
                // Êõ¥Êñ∞ GPU Êï∞ÊçÆ
                this.updateGPUDisplay(data.gpu);
                
                // Êõ¥Êñ∞ÊúÄÂêéÊõ¥Êñ∞Êó∂Èó¥
                document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString('zh-CN');
                document.getElementById('dataPackets').textContent = this.dataPacketCount;
            }

            updateCPUDisplay(cpuData) {
                if (!cpuData || !cpuData.cores) return;
                
                const content = document.getElementById('cpuContent');
                let html = '<div class="cpu-cores">';
                
                cpuData.cores.forEach(core => {
                    html += `
                        <div class="cpu-core">
                            <div class="cpu-core-id">Ê†∏ÂøÉ ${core.id}</div>
                            <div class="cpu-core-usage">${core.usage}%</div>
                            <div class="cpu-core-freq">${core.freq}MHz</div>
                        </div>
                    `;
                });
                
                html += '</div>';
                content.innerHTML = html;
            }

            updateMemoryDisplay(memoryData) {
                if (!memoryData) return;
                
                const content = document.getElementById('memoryContent');
                let html = '';
                
                if (memoryData.ram) {
                    const ramUsagePercent = ((memoryData.ram.used / memoryData.ram.total) * 100).toFixed(1);
                    html += `
                        <div class="metric">
                            <span class="metric-label">RAM ‰ΩøÁî®Áéá</span>
                            <span class="metric-value">${ramUsagePercent}%</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${ramUsagePercent}%">${ramUsagePercent}%</div>
                        </div>
                        <div class="metric">
                            <span class="metric-label">RAM</span>
                            <span class="metric-value">${memoryData.ram.used}/${memoryData.ram.total} MB</span>
                        </div>
                    `;
                }
                
                if (memoryData.swap) {
                    const swapUsagePercent = memoryData.swap.total > 0 ? 
                        ((memoryData.swap.used / memoryData.swap.total) * 100).toFixed(1) : 0;
                    html += `
                        <div class="metric">
                            <span class="metric-label">SWAP</span>
                            <span class="metric-value">${memoryData.swap.used}/${memoryData.swap.total} MB</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${swapUsagePercent}%">${swapUsagePercent}%</div>
                        </div>
                    `;
                }
                
                content.innerHTML = html;
            }

            updateTemperatureDisplay(tempData) {
                if (!tempData) return;
                
                const content = document.getElementById('temperatureContent');
                let html = '<div class="temperature-grid">';
                
                const tempItems = [
                    { label: 'CPU', value: tempData.cpu },
                    { label: 'SoC 0', value: tempData.soc0 },
                    { label: 'SoC 1', value: tempData.soc1 },
                    { label: 'SoC 2', value: tempData.soc2 },
                    { label: 'Junction', value: tempData.tj }
                ];
                
                tempItems.forEach(item => {
                    if (item.value !== undefined) {
                        html += `
                            <div class="temp-item">
                                <div class="temp-label">${item.label}</div>
                                <div class="temp-value">${item.value.toFixed(1)}¬∞C</div>
                            </div>
                        `;
                    }
                });
                
                html += '</div>';
                content.innerHTML = html;
            }

            updatePowerDisplay(powerData) {
                if (!powerData) return;
                
                const content = document.getElementById('powerContent');
                let html = '';
                
                const powerItems = [
                    { label: 'GPU+SoC', data: powerData.gpu_soc },
                    { label: 'CPU', data: powerData.cpu_cv },
                    { label: 'Á≥ªÁªü 5V', data: powerData.sys_5v },
                    { label: 'RAM', data: powerData.ram }
                ];
                
                powerItems.forEach(item => {
                    if (item.data && item.data.current !== undefined) {
                        html += `
                            <div class="metric">
                                <span class="metric-label">${item.label}</span>
                                <span class="metric-value">${item.data.current} ${item.data.unit || 'mW'}</span>
                            </div>
                        `;
                    }
                });
                
                content.innerHTML = html;
            }

            updateGPUDisplay(gpuData) {
                if (!gpuData) return;
                
                const content = document.getElementById('gpuContent');
                let html = '';
                
                if (gpuData.gr3d_freq !== undefined) {
                    html += `
                        <div class="metric">
                            <span class="metric-label">3D GPU È¢ëÁéá</span>
                            <span class="metric-value">${gpuData.gr3d_freq}%</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${gpuData.gr3d_freq}%">${gpuData.gr3d_freq}%</div>
                        </div>
                    `;
                }
                
                content.innerHTML = html || '<div class="no-data">ÊöÇÊó† GPU Êï∞ÊçÆ</div>';
            }

            updateConnectionStatus(status, message) {
                const indicator = document.getElementById('agxStatusIndicator');
                const statusText = document.getElementById('agxStatusText');
                
                indicator.className = `status-indicator status-${status}`;
                statusText.textContent = message;
            }

            scheduleReconnect() {
                this.reconnectAttempts++;
                const delay = this.reconnectInterval;
                
                setTimeout(() => {
                    this.connect();
                }, delay);
            }

            startConnectionTimeUpdate() {
                setInterval(() => {
                    if (this.connectionStartTime) {
                        const duration = Math.floor((new Date() - this.connectionStartTime) / 1000);
                        const minutes = Math.floor(duration / 60);
                        const seconds = duration % 60;
                        document.getElementById('connectionTime').textContent = 
                            `${minutes}:${seconds.toString().padStart(2, '0')}`;
                    } else {
                        document.getElementById('connectionTime').textContent = '-';
                    }
                }, 1000);
            }
        }

        // Â∫îÁî®ÊúçÂä°Âô® ÁõëÊéßÁ±ª
        class Â∫îÁî®ÊúçÂä°Âô®Monitor {
            constructor() {
                this.ws = null;
                this.reconnectInterval = 3000;
                this.maxReconnectAttempts = 5;
                this.reconnectAttempts = 0;
                this.connectionStartTime = null;
                this.dataPacketCount = 0;
                this.isConnecting = false;
                
                this.init();
            }

            init() {
                this.connect();
                this.startConnectionTimeUpdate();
            }

            connect() {
                if (this.isConnecting) return;
                
                this.isConnecting = true;
                this.updateConnectionStatus('connecting', 'Ê≠£Âú®ËøûÊé•Âà∞ Â∫îÁî®ÊúçÂä°Âô®...');

                try {
                    // ËøûÊé•Âà∞ Â∫îÁî®ÊúçÂä°Âô® ÊúçÂä°Âô®ÁöÑ WebSocket (Socket.IO)
                    this.ws = new WebSocket('ws://10.10.99.99:59090/socket.io/?EIO=4&transport=websocket');
                    
                    this.ws.onopen = () => {
                        console.log('Â∫îÁî®ÊúçÂä°Âô® WebSocket ËøûÊé•Â∑≤Âª∫Á´ã');
                        this.isConnecting = false;
                        this.reconnectAttempts = 0;
                        this.connectionStartTime = new Date();
                        this.updateConnectionStatus('connected', 'Â∑≤ËøûÊé•Âà∞ Â∫îÁî®ÊúçÂä°Âô® ÊúçÂä°Âô®');
                        
                        // ÂèëÈÄÅÂàùÂßãËøûÊé•Ê∂àÊÅØ (Socket.IO Êè°Êâã)
                        this.ws.send('40');
                    };

                    this.ws.onmessage = (event) => {
                        this.handleMessage(event.data);
                    };

                    this.ws.onclose = (event) => {
                        console.log('Â∫îÁî®ÊúçÂä°Âô® WebSocket ËøûÊé•Â∑≤ÂÖ≥Èó≠:', event.code, event.reason);
                        this.isConnecting = false;
                        this.connectionStartTime = null;
                        this.updateConnectionStatus('disconnected', 'Â∫îÁî®ÊúçÂä°Âô® ËøûÊé•Â∑≤Êñ≠ÂºÄ');
                        this.scheduleReconnect();
                    };

                    this.ws.onerror = (error) => {
                        console.error('Â∫îÁî®ÊúçÂä°Âô® WebSocket ÈîôËØØ:', error);
                        this.isConnecting = false;
                        this.updateConnectionStatus('disconnected', 'Â∫îÁî®ÊúçÂä°Âô® ËøûÊé•ÈîôËØØ');
                    };

                } catch (error) {
                    console.error('Â∫îÁî®ÊúçÂä°Âô® ËøûÊé•Â§±Ë¥•:', error);
                    this.isConnecting = false;
                    this.updateConnectionStatus('disconnected', 'Â∫îÁî®ÊúçÂä°Âô® ËøûÊé•Â§±Ë¥•');
                    this.scheduleReconnect();
                }
            }

            handleMessage(data) {
                console.log('Â∫îÁî®ÊúçÂä°Âô® Êî∂Âà∞Ê∂àÊÅØ:', data);
                
                // Â§ÑÁêÜ Socket.IO Ê∂àÊÅØÊ†ºÂºè
                if (data.startsWith('42')) {
                    try {
                        // Ëß£Êûê Socket.IO Êï∞ÊçÆÂåÖ
                        const jsonData = data.substring(2);
                        const parsed = JSON.parse(jsonData);
                        
                        if (parsed[0] === 'lpmu_status_update' && parsed[1]) {
                            this.dataPacketCount++;
                            this.updateSystemData(parsed[1]);
                        }
                    } catch (error) {
                        console.error('Â∫îÁî®ÊúçÂä°Âô® Ëß£ÊûêÊ∂àÊÅØÂ§±Ë¥•:', error);
                    }
                } else if (data === '40') {
                    // Socket.IO Êè°ÊâãÁ°ÆËÆ§
                    console.log('Â∫îÁî®ÊúçÂä°Âô® Socket.IO Êè°ÊâãÂÆåÊàê');
                } else if (data.startsWith('2')) {
                    // Ping frame - ÂõûÂ§ç pong
                    this.ws.send('3');
                }
            }

            updateSystemData(data) {
                console.log('Êõ¥Êñ∞ Â∫îÁî®ÊúçÂä°Âô® Á≥ªÁªüÊï∞ÊçÆ:', data);
                
                // Êõ¥Êñ∞ CPU Êï∞ÊçÆ
                this.updateCPUDisplay(data.cpu);
                
                // Êõ¥Êñ∞ÂÜÖÂ≠òÊï∞ÊçÆ
                this.updateMemoryDisplay(data.memory);
                
                // Êõ¥Êñ∞Ê∏©Â∫¶Êï∞ÊçÆ
                this.updateTemperatureDisplay(data.temperature);
                
                // Êõ¥Êñ∞Á£ÅÁõòÊï∞ÊçÆ
                this.updateDiskDisplay(data.disk);
                
                // Êõ¥Êñ∞ÊúÄÂêéÊõ¥Êñ∞Êó∂Èó¥
                document.getElementById('lpmuLastUpdate').textContent = new Date().toLocaleTimeString('zh-CN');
                document.getElementById('lpmuDataPackets').textContent = this.dataPacketCount;
            }

            updateCPUDisplay(cpuData) {
                if (!cpuData) return;
                
                const content = document.getElementById('lpmuCpuContent');
                let html = '';
                
                // Âπ≥Âùá CPU ‰ΩøÁî®Áéá
                if (cpuData.avg_usage !== undefined) {
                    html += `
                        <div class="metric">
                            <span class="metric-label">Âπ≥Âùá‰ΩøÁî®Áéá</span>
                            <span class="metric-value">${cpuData.avg_usage.toFixed(1)}%</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${cpuData.avg_usage}%">${cpuData.avg_usage.toFixed(1)}%</div>
                        </div>
                    `;
                }
                
                // CPU Ê†∏ÂøÉ‰ø°ÊÅØ
                if (cpuData.cores && cpuData.cores.length > 0) {
                    html += '<div class="cpu-cores">';
                    cpuData.cores.forEach(core => {
                        html += `
                            <div class="cpu-core">
                                <div class="cpu-core-id">Ê†∏ÂøÉ ${core.id}</div>
                                <div class="cpu-core-usage">${core.usage.toFixed(1)}%</div>
                                <div class="cpu-core-freq">${core.freq}MHz</div>
                            </div>
                        `;
                    });
                    html += '</div>';
                }
                
                content.innerHTML = html || '<div class="no-data">ÊöÇÊó† CPU Êï∞ÊçÆ</div>';
            }

            updateMemoryDisplay(memoryData) {
                if (!memoryData) return;
                
                const content = document.getElementById('lpmuMemoryContent');
                let html = '';
                
                if (memoryData.ram) {
                    html += `
                        <div class="metric">
                            <span class="metric-label">RAM ‰ΩøÁî®Áéá</span>
                            <span class="metric-value">${memoryData.ram.percent.toFixed(1)}%</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${memoryData.ram.percent}%">${memoryData.ram.percent.toFixed(1)}%</div>
                        </div>
                        <div class="metric">
                            <span class="metric-label">RAM</span>
                            <span class="metric-value">${memoryData.ram.used}/${memoryData.ram.total} ${memoryData.ram.unit}</span>
                        </div>
                    `;
                }
                
                if (memoryData.swap) {
                    html += `
                        <div class="metric">
                            <span class="metric-label">SWAP</span>
                            <span class="metric-value">${memoryData.swap.used}/${memoryData.swap.total} ${memoryData.swap.unit}</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${memoryData.swap.percent}%">${memoryData.swap.percent.toFixed(1)}%</div>
                        </div>
                    `;
                }
                
                content.innerHTML = html || '<div class="no-data">ÊöÇÊó†ÂÜÖÂ≠òÊï∞ÊçÆ</div>';
            }

            updateTemperatureDisplay(tempData) {
                if (!tempData) return;
                
                const content = document.getElementById('lpmuTemperatureContent');
                let html = '<div class="lpmu-temperature-grid">';
                
                // ÈÅçÂéÜÊâÄÊúâÊ∏©Â∫¶‰º†ÊÑüÂô®
                Object.keys(tempData).forEach(key => {
                    const temp = tempData[key];
                    if (typeof temp === 'number') {
                        html += `
                            <div class="temp-item">
                                <div class="temp-label">${key}</div>
                                <div class="temp-value">${temp.toFixed(1)}¬∞C</div>
                            </div>
                        `;
                    }
                });
                
                html += '</div>';
                content.innerHTML = html;
            }

            updateDiskDisplay(diskData) {
                if (!diskData) return;
                
                const content = document.getElementById('lpmuDiskContent');
                let html = '<div class="disk-grid">';
                
                // ÈÅçÂéÜÊâÄÊúâÁ£ÅÁõò
                Object.keys(diskData).forEach(key => {
                    const disk = diskData[key];
                    if (disk && disk.percent !== undefined) {
                        html += `
                            <div class="disk-item">
                                <div class="disk-label">${key}</div>
                                <div class="disk-usage">${disk.percent.toFixed(1)}%</div>
                                <div class="progress-bar" style="margin: 8px 0;">
                                    <div class="progress-fill" style="width: ${disk.percent}%"></div>
                                </div>
                                <div class="disk-details">${disk.used}/${disk.total} ${disk.unit}</div>
                                <div class="disk-details">${disk.mountpoint || ''}</div>
                            </div>
                        `;
                    }
                });
                
                html += '</div>';
                content.innerHTML = html;
            }

            updateConnectionStatus(status, message) {
                const indicator = document.getElementById('lpmuStatusIndicator');
                const statusText = document.getElementById('lpmuStatusText');
                
                indicator.className = `status-indicator status-${status}`;
                statusText.textContent = message;
            }

            scheduleReconnect() {
                this.reconnectAttempts++;
                const delay = this.reconnectInterval;
                
                setTimeout(() => {
                    this.connect();
                }, delay);
            }

            startConnectionTimeUpdate() {
                setInterval(() => {
                    if (this.connectionStartTime) {
                        const duration = Math.floor((new Date() - this.connectionStartTime) / 1000);
                        const minutes = Math.floor(duration / 60);
                        const seconds = duration % 60;
                        document.getElementById('lpmuConnectionTime').textContent = 
                            `${minutes}:${seconds.toString().padStart(2, '0')}`;
                    } else {
                        document.getElementById('lpmuConnectionTime').textContent = '-';
                    }
                }, 1000);
            }
        }

        // È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñÁõëÊéß
        document.addEventListener('DOMContentLoaded', () => {
            new Êé®ÁêÜÊúçÂä°Âô®Monitor();
            new Â∫îÁî®ÊúçÂä°Âô®Monitor();
        });
    </script>
</body>
</html>
