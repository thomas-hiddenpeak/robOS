<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, shrink-to-fit=no">
    <title>Rob OS</title>
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="RM - 01 监控面板">
    <link rel="apple-touch-icon" href="apple-touch-icon.png">
    <link rel="icon" href="favicon.ico" type="image/x-icon">
    <link rel="icon" href="favicon.png" type="image/png">
    <link rel="shortcut icon" href="favicon.ico" type="image/x-icon">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #59d5f6 0%, #c386f4 50%, #ff9fc1 100%);
            min-height: 100vh;
            color: #333;
        }
        

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            padding-top: 160px; /* 减少基础间距，因为main-panel的上边距已经增加 */
        }

        .fixed-header {
            position: fixed;
            top: 0;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1000;
            background: rgba(255,255,255,0.15);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255,255,255,0.2);
            border-radius: 20px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            padding: 30px;
            max-width: 1160px; /* 与container内容宽度一致：1200px - 40px (左右padding) */
            width: calc(100% - 40px); /* 与container保持相同的边距 */
        }

        .fixed-header-content {
            margin: 0;
            padding: 0;
            position: relative;
        }

        /* 语言切换按钮样式 */
        .language-switcher {
            position: absolute;
            top: 0;
            right: 0;
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 6px;
            padding: 4px 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 4px;
            font-size: 0.7rem;
            color: white;
            font-weight: 500;
            z-index: 10;
        }

        .language-switcher:hover {
            background: rgba(255, 255, 255, 0.25);
            border-color: rgba(255, 255, 255, 0.5);
            transform: translateY(-1px);
        }

        .language-switcher .lang-icon {
            font-size: 0.8rem;
        }

        .language-switcher .lang-text {
            transition: color 0.3s ease;
        }

        .header {
            text-align: center;
            color: white;
            margin-bottom: 20px;
            transition: color 0.3s ease;
        }

        .header h1 {
            font-size: 2.2rem;
            margin-bottom: 8px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            transition: color 0.3s ease, text-shadow 0.3s ease;
        }

        .dashboard-title-container {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-bottom: 12px;
        }

        .dashboard-logo {
            height: 1.1rem; /* 缩小到原来的50%：2.2rem * 0.5 = 1.1rem */
            width: auto;
            object-fit: contain;
            filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.3));
        }

        .header p {
            font-size: 1rem;
            opacity: 0.9;
            margin: 0;
            transition: color 0.3s ease;
        }

        .connection-status {
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-radius: 10px;
            padding: 15px;
            color: white;
            text-align: center;
            margin: 0 auto;
            max-width: 100%; /* 与system-header保持相同宽度 */
            transition: color 0.3s ease;
        }

        .main-panel {
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(15px);
            border-radius: 20px;
            padding: 30px;
            margin: 100px 0 20px 0; /* 调整上边距到100px，与Dashboard顶部对齐后保持相同间隙 */
            border: 1px solid rgba(255,255,255,0.2);
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }

        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .status-connected { background-color: #4CAF50; }
        .status-connecting { background-color: #FF9800; }
        .status-disconnected { background-color: #f44336; }

        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }

        .card {
            background: rgba(255,255,255,0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.18);
            width: 100%;
            box-sizing: border-box;
            overflow: hidden;
        }

        .card-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 2px solid #eee;
            text-align: left;
        }

        .card-icon {
            font-size: 1.5rem;
            margin-right: 10px;
        }

        .card-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #323232;
            text-align: left;
        }

        .metric {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 10px 0;
            padding: 8px 0;
            text-align: left !important;
        }

        .metric-label {
            font-weight: 500;
            color: #555;
            text-align: left !important;
            margin-left: 0px;
        }

        .metric-value {
            font-weight: 600;
            color: #323232;
            text-align: left !important;
        }

        .progress-bar {
            width: 100%;
            height: 20px;
            background-color: #e0e0e0;
            border-radius: 10px;
            overflow: hidden;
            margin: 5px 0;
            position: relative;
            box-sizing: border-box;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4CAF50, #45a049);
            border-radius: 10px;
            transition: width 0.3s ease;
            text-align: center;
            line-height: 20px;
            color: white;
            font-size: 12px;
            font-weight: bold;
            position: relative;
            box-sizing: border-box;
            max-width: 100%;
        }

        .cpu-cores {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
            gap: 8px;
            margin-top: 10px;
        }

        .cpu-core {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 8px;
            text-align: left;
            border: 1px solid #e9ecef;
        }

        .cpu-core-id {
            font-size: 0.8rem;
            color: #666;
            margin-bottom: 2px;
            text-align: left;
        }

        .cpu-core-usage {
            font-weight: bold;
            color: #323232;
            text-align: left;
        }

        .cpu-core-freq {
            font-size: 0.7rem;
            color: #888;
            text-align: left;
        }

        /* 推理服务器 CPU 柱状图样式 */
        .cpu-chart {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 8px;
            margin-top: 10px;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 10px;
        }

        .cpu-bar-item {
            display: flex;
            align-items: center;
            gap: 8px;
            height: 28px;
        }

        .cpu-bar-label {
            width: 50px;
            font-size: 0.8rem;
            font-weight: 500;
            color: #666;
            text-align: left;
            flex-shrink: 0;
        }

        .cpu-bar-container {
            flex: 1;
            height: 18px;
            background-color: #e0e0e0;
            border-radius: 9px;
            overflow: hidden;
            position: relative;
        }

        .cpu-bar-fill {
            height: 100%;
            background: linear-gradient(90deg, #4CAF50, #45a049);
            border-radius: 9px;
            transition: width 0.3s ease;
            position: relative;
            min-width: 0; /* 移除最小宽度限制 */
        }

        .cpu-bar-value {
            font-size: 0.6rem; /* 缩小字体 */
            font-weight: bold;
            color: white;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
            position: absolute;
            right: 4px; /* 减小右边距 */
            top: 50%;
            transform: translateY(-50%);
            z-index: 2;
            white-space: nowrap; /* 防止文字换行 */
            min-width: max-content; /* 确保文字完整显示 */
        }

        /* 内存、显存、GPU监控专用样式 */
        .memory-chart {
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin-top: 10px;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 10px;
        }

        .memory-item {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .memory-metric {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 5px;
        }

        .memory-metric-label {
            font-size: 0.9rem;
            font-weight: 500;
            color: #666;
            margin: 0 !important;
        }

        .memory-metric-value {
            font-size: 0.85rem;
            font-weight: bold;
            color: #323232;
        }

        /* 推理服务器 温度监控柱状图样式 */
        .temp-chart {
            display: flex;
            flex-direction: column;
            gap: 8px;
            margin-top: 10px;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 10px;
        }

        .temp-bar-item {
            display: flex;
            align-items: center;
            gap: 10px;
            height: 30px;
        }

        .temp-bar-label {
            width: 70px;
            font-size: 0.85rem;
            font-weight: 500;
            color: #666;
            text-align: left;
            flex-shrink: 0;
        }

        .temp-bar-container {
            flex: 1;
            height: 20px;
            background-color: #e0e0e0;
            border-radius: 10px;
            overflow: hidden;
            position: relative;
        }

        .temp-bar-fill {
            height: 100%;
            border-radius: 10px;
            transition: width 0.3s ease, background 0.3s ease;
            position: relative;
            min-width: 45px; /* 确保即使是低温度也有最小宽度来显示文字 */
        }

        .temp-bar-value {
            font-size: 0.75rem;
            font-weight: bold;
            color: white;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            z-index: 2;
        }


        .temperature-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 10px;
        }

        .lpmu-temperature-grid {
            display: grid;
            grid-template-columns: repeat(6, 1fr);
            gap: 8px;
            margin-top: 10px;
            width: 100%;
            box-sizing: border-box;
            overflow: hidden;
        }

        .disk-grid {
            display: grid;
            grid-template-columns: repeat(6, 200px);
            gap: 10px;
            margin-top: 10px;
            justify-content: start;
            width: 100%;
            box-sizing: border-box;
            overflow-x: auto;
            overflow-y: hidden;
        }

        .disk-item {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 12px;
            text-align: left;
            border: 1px solid #e9ecef;
            min-height: 120px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            width: 100%;
            box-sizing: border-box;
            overflow: hidden;
        }

        .disk-label {
            font-size: 0.75rem;
            color: #666;
            margin-bottom: 8px;
            font-weight: 500;
            text-align: left;
            line-height: 1.2;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .disk-usage {
            font-size: 1.1rem;
            font-weight: bold;
            color: #323232;
            margin-bottom: 4px;
            text-align: left;
        }

        .disk-details {
            font-size: 0.75rem;
            color: #888;
            text-align: left;
        }

        .temp-item {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 10px;
            text-align: left;
            border: 1px solid #e9ecef;
            width: 100%;
            box-sizing: border-box;
            overflow: hidden;
        }

        .temp-label {
            font-size: 0.75rem;
            color: #666;
            margin-bottom: 5px;
            text-align: left;
            line-height: 1.2;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .temp-value {
            font-size: 1.1rem;
            font-weight: bold;
            color: #323232;
            text-align: left;
        }

        .no-data {
            text-align: left;
            color: #888;
            font-style: italic;
            padding: 20px;
        }

        .system-section {
            margin-bottom: 40px;
        }

        .system-header {
            background: rgba(255,255,255,0.15);
            backdrop-filter: blur(10px);
            border-radius: 10px;
            padding: 15px 20px;
            margin-bottom: 20px;
            color: white;
            text-align: center;
            border: 1px solid rgba(255,255,255,0.2);
        }

        .system-header h2 {
            margin: 0;
            font-size: 1.5rem;
            font-weight: 600;
        }

        .system-header p {
            margin: 5px 0 0 0;
            opacity: 0.9;
            font-size: 0.9rem;
        }

        .lpmu-dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }

        .lpmu-row-1 {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            grid-column: 1 / -1;
        }

        .lpmu-row-2 {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            grid-column: 1 / -1;
        }

        .lpmu-full-width {
            grid-column: 1 / -1;
        }

        @media (max-width: 1200px) {
            .lpmu-temperature-grid {
                grid-template-columns: repeat(4, 1fr);
            }
            
            .disk-grid {
                grid-template-columns: repeat(4, 200px);
            }
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
                padding-top: 180px; /* 移动端相应调整 */
            }
            
            .fixed-header {
                top: 0;
                max-width: calc(100% - 20px); /* 与移动端container保持一致 */
                width: calc(100% - 20px);
                padding: 20px;
            }
            
            .fixed-header-content {
                padding: 0;
            }
            
            /* 移动端语言切换按钮进一步缩小 */
            .language-switcher {
                padding: 3px 6px;
                font-size: 0.65rem;
                gap: 3px;
                border-radius: 4px;
            }
            
            .language-switcher .lang-icon {
                font-size: 0.7rem;
            }
            
            .header h1 {
                font-size: 1.8rem;
            }
            
            .dashboard-title-container {
                margin-bottom: 8px; /* 移动端减少间距 */
            }
            
            .dashboard-logo {
                height: 0.9rem; /* 缩小到原来的50%：1.8rem * 0.5 = 0.9rem */
            }
            
            .header p {
                font-size: 0.9rem;
            }
            
            .dashboard {
                grid-template-columns: 1fr;
            }

            /* 移动端减少间距 */
            .main-panel {
                margin: 40px 0 20px 0; /* 移动端减少上边距从100px到40px */
                padding: 20px; /* 移动端减少内边距 */
            }

            .system-section {
                margin-bottom: 25px; /* 移动端减少系统区块间距从40px到25px */
            }

            .lpmu-dashboard,
            .lpmu-row-1,
            .lpmu-row-2 {
                grid-template-columns: 1fr;
            }

            .temperature-grid {
                grid-template-columns: 1fr;
            }

            .lpmu-temperature-grid {
                grid-template-columns: repeat(3, 1fr);
            }
            
            .disk-grid {
                grid-template-columns: repeat(2, 200px);
            }

            .system-header h2 {
                font-size: 1.3rem;
            }
            
            /* 移动端 CPU 图表单列显示 */
            .cpu-chart {
                grid-template-columns: 1fr;
            }
        }

        /* 监控卡片内容对齐样式 */
        .system-metric-label {
            margin-left: 0px !important;
        }

        /* 版权信息样式 */
        .copyright {
            text-align: center;
            padding: 30px 20px;
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.85rem;
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            margin-top: 40px;
        }

        .copyright p {
            margin: 0;
            line-height: 1.5;
        }

        .copyright .separator {
            margin: 0 8px;
            opacity: 0.5;
        }
    </style>
</head>
<body>
    <!-- 固定头部 -->
    <div class="fixed-header">
        <div class="fixed-header-content">
            <!-- 语言切换按钮 -->
            <div class="language-switcher" id="languageSwitcher" onclick="switchLanguage()">
                <span class="lang-icon">🌐</span>
                <span class="lang-text" id="langText">EN</span>
            </div>
            
            <div class="header">
                <div class="dashboard-title-container">
                    <img src="base.png" alt="Logo" class="dashboard-logo" />
                </div>
                <h1 data-translate="title">RM - 01 Dashboard</h1>
                <p data-translate="subtitle">RobOS ( Rack on board ) 实时系统性能监控面板</p>
            </div>

            <div class="connection-status">
                <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 10px;">
                    <div>
                        <span class="status-indicator status-connecting" id="agxStatusIndicator"></span>
                        <span id="agxStatusText" data-translate="connecting-inference">正在连接到 推理服务器...</span>
                    </div>
                    <div>
                        <span class="status-indicator status-connecting" id="lpmuStatusIndicator"></span>
                        <span id="lpmuStatusText" data-translate="connecting-application">正在连接到 应用服务器...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="main-panel">

            <!-- 推理服务器 监控部分 -->
            <div class="system-section">
                <div class="system-header">
                    <h2 data-translate="inference-monitoring">推理模组监控</h2>
                    <p data-translate="nvidia-status">NVIDIA 推理服务器系统状态</p>
                </div>
                
                <div class="dashboard">
                    <!-- 推理服务器 CPU 监控卡片 -->
                    <div class="card">
                        <div class="card-header">
                            <div class="card-icon"> </div>
                            <div class="card-title" data-translate="cpu-monitoring">CPU 监控</div>
                        </div>
                        <div id="cpuContent">
                            <div class="no-data" data-translate="waiting-data">等待数据...</div>
                        </div>
                    </div>

                    <!-- 推理服务器 内存监控卡片 -->
                    <div class="card">
                        <div class="card-header">
                            <div class="card-icon"> </div>
                            <div class="card-title" data-translate="memory-monitoring">显存监控</div>
                        </div>
                        <div id="memoryContent">
                            <div class="no-data" data-translate="waiting-data">等待数据...</div>
                        </div>
                    </div>

                    <!-- 推理服务器 温度监控卡片 -->
                    <div class="card">
                        <div class="card-header">
                            <div class="card-icon"> </div>
                            <div class="card-title" data-translate="temperature-monitoring">温度监控</div>
                        </div>
                        <div id="temperatureContent">
                            <div class="no-data" data-translate="waiting-data">等待数据...</div>
                        </div>
                    </div>

                    <!-- 推理服务器 功耗监控卡片 -->
                    <div class="card">
                        <div class="card-header">
                            <div class="card-icon"> </div>
                            <div class="card-title" data-translate="power-monitoring">功耗监控</div>
                        </div>
                        <div id="powerContent">
                            <div class="no-data" data-translate="waiting-data">等待数据...</div>
                        </div>
                    </div>

                    <!-- 推理服务器 GPU 监控卡片 -->
                    <div class="card">
                        <div class="card-header">
                            <div class="card-icon"> </div>
                            <div class="card-title" data-translate="gpu-monitoring">GPU 监控</div>
                        </div>
                        <div id="gpuContent">
                            <div class="no-data" data-translate="waiting-data">等待数据...</div>
                        </div>
                    </div>

                    <!-- 推理服务器 系统信息卡片 -->
                    <div class="card">
                        <div class="card-header">
                            <div class="card-icon"> </div>
                            <div class="card-title" data-translate="system-info">系统信息</div>
                        </div>
                        <div id="systemContent">
                            <div class="memory-chart">
                                <div class="memory-metric">
                                    <span class="memory-metric-label" data-translate="last-update">最后更新</span>
                                    <span class="memory-metric-value" id="lastUpdate">-</span>
                                </div>
                                <div class="memory-metric">
                                    <span class="memory-metric-label" data-translate="connection-time">连接时间</span>
                                    <span class="memory-metric-value" id="connectionTime">-</span>
                                </div>
                                <div class="memory-metric">
                                    <span class="memory-metric-label" data-translate="data-packets">数据包</span>
                                    <span class="memory-metric-value" id="dataPackets">0</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- LattePanda Mu 监控部分 -->
            <div class="system-section">
                <div class="system-header">
                    <h2 data-translate="application-monitoring">应用模组监控</h2>
                    <p data-translate="intel-status">Intel X86 应用服务器系统状态</p>
                </div>
            
            <div class="lpmu-dashboard">
                <!-- 第一行：CPU、内存、系统信息 -->
                <div class="lpmu-row-1">
                    <!-- 应用服务器 CPU 监控卡片 -->
                    <div class="card">
                        <div class="card-header">
                            <div class="card-icon"> </div>
                            <div class="card-title" data-translate="cpu-monitoring">CPU 监控</div>
                        </div>
                        <div id="lpmuCpuContent">
                            <div class="no-data" data-translate="waiting-data">等待数据...</div>
                        </div>
                    </div>

                    <!-- 应用服务器 内存监控卡片 -->
                    <div class="card">
                        <div class="card-header">
                            <div class="card-icon"> </div>
                            <div class="card-title" data-translate="ram-monitoring">内存监控</div>
                        </div>
                        <div id="lpmuMemoryContent">
                            <div class="no-data" data-translate="waiting-data">等待数据...</div>
                        </div>
                    </div>

                    <!-- 应用服务器 系统信息卡片 -->
                    <div class="card">
                        <div class="card-header">
                            <div class="card-icon"> </div>
                            <div class="card-title" data-translate="system-info">系统信息</div>
                        </div>
                        <div id="lpmuSystemContent">
                            <div class="memory-chart">
                                <div class="memory-metric">
                                    <span class="memory-metric-label" data-translate="last-update">最后更新</span>
                                    <span class="memory-metric-value" id="lpmuLastUpdate">-</span>
                                </div>
                                <div class="memory-metric">
                                    <span class="memory-metric-label" data-translate="connection-time">连接时间</span>
                                    <span class="memory-metric-value" id="lpmuConnectionTime">-</span>
                                </div>
                                <div class="memory-metric">
                                    <span class="memory-metric-label" data-translate="data-packets">数据包</span>
                                    <span class="memory-metric-value" id="lpmuDataPackets">0</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 第二行：温度监控 -->
                <div class="lpmu-row-2">
                    <!-- 应用服务器 温度监控卡片 -->
                    <div class="card lpmu-full-width">
                        <div class="card-header">
                            <div class="card-icon"> </div>
                            <div class="card-title" data-translate="temperature-monitoring">温度监控</div>
                        </div>
                        <div id="lpmuTemperatureContent">
                            <div class="no-data" data-translate="waiting-data">等待数据...</div>
                        </div>
                    </div>
                </div>

                <!-- 第三行：磁盘监控 -->
                <div class="lpmu-row-2">
                    <!-- 应用服务器 磁盘监控卡片 -->
                    <div class="card lpmu-full-width">
                        <div class="card-header">
                            <div class="card-icon"> </div>
                            <div class="card-title" data-translate="disk-monitoring">磁盘监控</div>
                        </div>
                        <div id="lpmuDiskContent">
                            <div class="no-data" data-translate="waiting-data">等待数据...</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        </div>
    </div>

    <!-- 版权信息 -->
    <div class="copyright">
        <p>© 2025 RobOS Team<span class="separator">|</span>RMinte<span class="separator">|</span>Panidea (Chengdu) Artificial Intelligence Technology Co., Ltd.</p>
    </div>

    <script>
        // WebSocket 连接管理
        class 推理服务器Monitor {
            constructor() {
                this.ws = null;
                this.reconnectInterval = 3000;
                this.maxReconnectAttempts = 5;
                this.reconnectAttempts = 0;
                this.connectionStartTime = null;
                this.dataPacketCount = 0;
                this.isConnecting = false;
                
                this.init();
            }

            init() {
                this.connect();
                this.startConnectionTimeUpdate();
            }

            connect() {
                if (this.isConnecting) return;
                
                this.isConnecting = true;
                const connectingText = getTranslation('connecting-inference', '正在连接到 推理服务器...');
                this.updateConnectionStatus('connecting', connectingText);

                try {
                    // 连接到 推理服务器 服务器的 WebSocket
                    this.ws = new WebSocket('ws://10.10.99.98:58090/socket.io/?EIO=4&transport=websocket');
                    
                    this.ws.onopen = () => {
                        console.log('WebSocket 连接已建立');
                        this.isConnecting = false;
                        this.reconnectAttempts = 0;
                        this.connectionStartTime = new Date();
                        const connectedText = getTranslation('connected-inference', '已连接到 推理服务器');
                        this.updateConnectionStatus('connected', connectedText);
                        
                        // 发送初始连接消息 (Socket.IO 握手)
                        this.ws.send('40');
                    };

                    this.ws.onmessage = (event) => {
                        this.handleMessage(event.data);
                    };

                    this.ws.onclose = (event) => {
                        console.log('WebSocket 连接已关闭:', event.code, event.reason);
                        this.isConnecting = false;
                        this.connectionStartTime = null;
                        const disconnectedText = getTranslation('disconnected-inference', '连接已断开');
                        this.updateConnectionStatus('disconnected', disconnectedText);
                        this.scheduleReconnect();
                    };

                    this.ws.onerror = (error) => {
                        console.error('WebSocket 错误:', error);
                        this.isConnecting = false;
                        const errorText = getTranslation('connection-error-inference', '连接错误');
                        this.updateConnectionStatus('disconnected', errorText);
                    };

                } catch (error) {
                    console.error('连接失败:', error);
                    this.isConnecting = false;
                    const errorText = getTranslation('connection-error-inference', '连接失败');
                    this.updateConnectionStatus('disconnected', errorText);
                    this.scheduleReconnect();
                }
            }

            handleMessage(data) {
                console.log('收到消息:', data);
                
                // 处理 Socket.IO 消息格式
                if (data.startsWith('42')) {
                    try {
                        // 解析 Socket.IO 数据包
                        const jsonData = data.substring(2);
                        const parsed = JSON.parse(jsonData);
                        
                        if (parsed[0] === 'tegrastats_update' && parsed[1]) {
                            this.dataPacketCount++;
                            this.updateSystemData(parsed[1]);
                        }
                    } catch (error) {
                        console.error('解析消息失败:', error);
                    }
                } else if (data === '40') {
                    // Socket.IO 握手确认
                    console.log('Socket.IO 握手完成');
                } else if (data.startsWith('2')) {
                    // Ping frame - 回复 pong
                    this.ws.send('3');
                }
            }

            updateSystemData(data) {
                console.log('更新系统数据:', data);
                
                // 更新 CPU 数据
                this.updateCPUDisplay(data.cpu);
                
                // 更新内存数据
                this.updateMemoryDisplay(data.memory);
                
                // 更新温度数据
                this.updateTemperatureDisplay(data.temperature);
                
                // 更新功耗数据
                this.updatePowerDisplay(data.power);
                
                // 更新 GPU 数据
                this.updateGPUDisplay(data.gpu);
                
                // 更新最后更新时间
                document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString('zh-CN');
                document.getElementById('dataPackets').textContent = this.dataPacketCount;
            }

            updateCPUDisplay(cpuData) {
                if (!cpuData || !cpuData.cores) return;
                
                const content = document.getElementById('cpuContent');
                let html = '<div class="cpu-chart">';
                
                // 确保有12个核心，如果数据不足则补充空数据
                const cores = [];
                for (let i = 0; i < 12; i++) {
                    const coreData = cpuData.cores.find(core => core.id === i);
                    cores.push(coreData || { id: i, usage: 0, freq: 0 });
                }
                
                cores.forEach(core => {
                    const usage = parseFloat(core.usage) || 0;
                    const coreLabel = getTranslation('core', '核心');
                    
                    // 确保进度条有足够宽度显示文字，减小最小宽度
                    const barWidth = Math.max(usage, 15); // 减小到15%最小宽度
                    
                    html += `
                        <div class="cpu-bar-item">
                            <div class="cpu-bar-label">${coreLabel} ${core.id + 1}</div>
                            <div class="cpu-bar-container">
                                <div class="cpu-bar-fill" style="width: ${barWidth}%; min-width: 28px;">
                                    <div class="cpu-bar-value">${usage.toFixed(1)}%</div>
                                </div>
                            </div>
                        </div>
                    `;
                });
                
                html += '</div>';
                content.innerHTML = html;
            }

            updateMemoryDisplay(memoryData) {
                if (!memoryData) return;
                
                const content = document.getElementById('memoryContent');
                let html = '<div class="memory-chart">';
                
                if (memoryData.ram) {
                    const ramUsagePercent = ((memoryData.ram.used / memoryData.ram.total) * 100).toFixed(1);
                    html += `
                        <div class="memory-item">
                            <div class="memory-metric">
                                <span class="memory-metric-label">RAM</span>
                                <span class="memory-metric-value">${memoryData.ram.used}/${memoryData.ram.total} MB</span>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: ${ramUsagePercent}%">${ramUsagePercent}%</div>
                            </div>
                        </div>
                    `;
                }
                
                if (memoryData.swap) {
                    const swapUsagePercent = memoryData.swap.total > 0 ? 
                        ((memoryData.swap.used / memoryData.swap.total) * 100).toFixed(1) : 0;
                    html += `
                        <div class="memory-item">
                            <div class="memory-metric">
                                <span class="memory-metric-label">SWAP</span>
                                <span class="memory-metric-value">${memoryData.swap.used}/${memoryData.swap.total} MB</span>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: ${swapUsagePercent}%; min-width: 45px;">${swapUsagePercent}%</div>
                            </div>
                        </div>
                    `;
                }
                
                html += '</div>';
                content.innerHTML = html;
            }

            updateTemperatureDisplay(tempData) {
                if (!tempData) return;
                
                const content = document.getElementById('temperatureContent');
                let html = '<div class="temp-chart">';
                
                const tempItems = [
                    { label: 'CPU', value: tempData.cpu },
                    { label: 'SoC 0', value: tempData.soc0 },
                    { label: 'SoC 1', value: tempData.soc1 },
                    { label: 'SoC 2', value: tempData.soc2 },
                    { label: 'Junction', value: tempData.tj }
                ];
                
                tempItems.forEach(item => {
                    if (item.value !== undefined) {
                        const temp = parseFloat(item.value) || 0;
                        // 温度范围为0-100°C
                        const minTemp = 0;
                        const maxTemp = 100;
                        const tempPercent = Math.max(0, Math.min((temp / maxTemp) * 100, 100));
                        
                        // 计算颜色渐变：40°C以下绿色，40°C-100°C从绿色渐变到红色
                        let backgroundColor;
                        if (temp <= 40) {
                            backgroundColor = 'linear-gradient(90deg, #4CAF50, #45a049)';
                        } else {
                            // 40°C以上的温度渐变：从绿色到红色
                            const gradientPercent = Math.min((temp - 40) / (100 - 40), 1);
                            const red = Math.round(76 + (244 - 76) * gradientPercent);   // 从#4CAF50的76到#f44336的244
                            const green = Math.round(175 + (67 - 175) * gradientPercent); // 从#4CAF50的175到#f44336的67
                            const blue = Math.round(80 + (54 - 80) * gradientPercent);   // 从#4CAF50的80到#f44336的54
                            
                            const red2 = Math.round(69 + (211 - 69) * gradientPercent);  // 从#45a049的69到#d32f2f的211
                            const green2 = Math.round(160 + (47 - 160) * gradientPercent); // 从#45a049的160到#d32f2f的47
                            const blue2 = Math.round(73 + (47 - 73) * gradientPercent);  // 从#45a049的73到#d32f2f的47
                            
                            backgroundColor = `linear-gradient(90deg, rgb(${red}, ${green}, ${blue}), rgb(${red2}, ${green2}, ${blue2}))`;
                        }
                        
                        html += `
                            <div class="temp-bar-item">
                                <div class="temp-bar-label">${item.label}</div>
                                <div class="temp-bar-container">
                                    <div class="temp-bar-fill" style="width: ${tempPercent}%; background: ${backgroundColor};">
                                        <div class="temp-bar-value">${temp.toFixed(1)}°C</div>
                                    </div>
                                </div>
                            </div>
                        `;
                    }
                });
                
                html += '</div>';
                content.innerHTML = html;
            }

            updatePowerDisplay(powerData) {
                if (!powerData) return;
                
                const content = document.getElementById('powerContent');
                let html = '<div class="memory-chart">';
                
                const powerItems = [
                    { label: 'GPU+SoC', data: powerData.gpu_soc },
                    { label: 'CPU', data: powerData.cpu_cv },
                    { label: getTranslation('system-5v', '系统 5V'), data: powerData.sys_5v },
                    { label: 'RAM', data: powerData.ram }
                ];
                
                powerItems.forEach(item => {
                    if (item.data && item.data.current !== undefined) {
                        html += `
                            <div class="memory-item">
                                <div class="memory-metric">
                                    <span class="memory-metric-label">${item.label}</span>
                                    <span class="memory-metric-value">${item.data.current} ${item.data.unit || 'mW'}</span>
                                </div>
                            </div>
                        `;
                    }
                });
                
                html += '</div>';
                content.innerHTML = html;
            }

            updateGPUDisplay(gpuData) {
                if (!gpuData) return;
                
                const content = document.getElementById('gpuContent');
                let html = '<div class="memory-chart">';
                
                if (gpuData.gr3d_freq !== undefined) {
                    const gpuFreqLabel = getTranslation('gpu-freq', '3D GPU 频率');
                    html += `
                        <div class="memory-item">
                            <div class="memory-metric">
                                <span class="memory-metric-label">${gpuFreqLabel}</span>
                                <span class="memory-metric-value">${gpuData.gr3d_freq}%</span>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: ${gpuData.gr3d_freq}%; min-width: 45px;">${gpuData.gr3d_freq}%</div>
                            </div>
                        </div>
                    `;
                }
                
                html += '</div>';
                const noDataText = getTranslation('no-gpu-data', '暂无 GPU 数据');
                content.innerHTML = html || `<div class="memory-chart"><div class="no-data">${noDataText}</div></div>`;
            }

            updateConnectionStatus(status, message) {
                const indicator = document.getElementById('agxStatusIndicator');
                const statusText = document.getElementById('agxStatusText');
                
                indicator.className = `status-indicator status-${status}`;
                statusText.textContent = message;
                
                // 保存当前状态用于语言切换时刷新
                this.currentStatus = status;
            }

            // 刷新连接状态显示（用于语言切换）
            refreshConnectionStatus() {
                if (this.currentStatus) {
                    let messageKey = '';
                    let fallbackMessage = '';
                    
                    switch(this.currentStatus) {
                        case 'connecting':
                            messageKey = 'connecting-inference';
                            fallbackMessage = '正在连接到 推理服务器...';
                            break;
                        case 'connected':
                            messageKey = 'connected-inference';
                            fallbackMessage = '已连接到 推理服务器';
                            break;
                        case 'disconnected':
                            messageKey = 'disconnected-inference';
                            fallbackMessage = '推理服务器 连接已断开';
                            break;
                    }
                    
                    if (messageKey) {
                        const message = getTranslation(messageKey, fallbackMessage);
                        document.getElementById('agxStatusText').textContent = message;
                    }
                }
            }

            scheduleReconnect() {
                this.reconnectAttempts++;
                const delay = this.reconnectInterval;
                
                setTimeout(() => {
                    this.connect();
                }, delay);
            }

            startConnectionTimeUpdate() {
                setInterval(() => {
                    if (this.connectionStartTime) {
                        const duration = Math.floor((new Date() - this.connectionStartTime) / 1000);
                        const minutes = Math.floor(duration / 60);
                        const seconds = duration % 60;
                        document.getElementById('connectionTime').textContent = 
                            `${minutes}:${seconds.toString().padStart(2, '0')}`;
                    } else {
                        document.getElementById('connectionTime').textContent = '-';
                    }
                }, 1000);
            }
        }

        // 应用服务器 监控类
        class 应用服务器Monitor {
            constructor() {
                this.ws = null;
                this.reconnectInterval = 3000;
                this.maxReconnectAttempts = 5;
                this.reconnectAttempts = 0;
                this.connectionStartTime = null;
                this.dataPacketCount = 0;
                this.isConnecting = false;
                
                this.init();
            }

            init() {
                this.connect();
                this.startConnectionTimeUpdate();
            }

            connect() {
                if (this.isConnecting) return;
                
                this.isConnecting = true;
                const connectingText = getTranslation('connecting-application', '正在连接到 应用服务器...');
                this.updateConnectionStatus('connecting', connectingText);

                try {
                    // 连接到 应用服务器 服务器的 WebSocket (Socket.IO)
                    this.ws = new WebSocket('ws://10.10.99.99:59090/socket.io/?EIO=4&transport=websocket');
                    
                    this.ws.onopen = () => {
                        console.log('应用服务器 WebSocket 连接已建立');
                        this.isConnecting = false;
                        this.reconnectAttempts = 0;
                        this.connectionStartTime = new Date();
                        const connectedText = getTranslation('connected-application', '已连接到 应用服务器');
                        this.updateConnectionStatus('connected', connectedText);
                        
                        // 发送初始连接消息 (Socket.IO 握手)
                        this.ws.send('40');
                    };

                    this.ws.onmessage = (event) => {
                        this.handleMessage(event.data);
                    };

                    this.ws.onclose = (event) => {
                        console.log('应用服务器 WebSocket 连接已关闭:', event.code, event.reason);
                        this.isConnecting = false;
                        this.connectionStartTime = null;
                        const disconnectedText = getTranslation('disconnected-application', '应用服务器 连接已断开');
                        this.updateConnectionStatus('disconnected', disconnectedText);
                        this.scheduleReconnect();
                    };

                    this.ws.onerror = (error) => {
                        console.error('应用服务器 WebSocket 错误:', error);
                        this.isConnecting = false;
                        const errorText = getTranslation('connection-error-application', '应用服务器 连接错误');
                        this.updateConnectionStatus('disconnected', errorText);
                    };

                } catch (error) {
                    console.error('应用服务器 连接失败:', error);
                    this.isConnecting = false;
                    const errorText = getTranslation('connection-error-application', '应用服务器 连接失败');
                    this.updateConnectionStatus('disconnected', errorText);
                    this.scheduleReconnect();
                }
            }

            handleMessage(data) {
                console.log('应用服务器 收到消息:', data);
                
                // 处理 Socket.IO 消息格式
                if (data.startsWith('42')) {
                    try {
                        // 解析 Socket.IO 数据包
                        const jsonData = data.substring(2);
                        const parsed = JSON.parse(jsonData);
                        
                        if (parsed[0] === 'lpmu_status_update' && parsed[1]) {
                            this.dataPacketCount++;
                            this.updateSystemData(parsed[1]);
                        }
                    } catch (error) {
                        console.error('应用服务器 解析消息失败:', error);
                    }
                } else if (data === '40') {
                    // Socket.IO 握手确认
                    console.log('应用服务器 Socket.IO 握手完成');
                } else if (data.startsWith('2')) {
                    // Ping frame - 回复 pong
                    this.ws.send('3');
                }
            }

            updateSystemData(data) {
                console.log('更新 应用服务器 系统数据:', data);
                
                // 更新 CPU 数据
                this.updateCPUDisplay(data.cpu);
                
                // 更新内存数据
                this.updateMemoryDisplay(data.memory);
                
                // 更新温度数据
                this.updateTemperatureDisplay(data.temperature);
                
                // 更新磁盘数据
                this.updateDiskDisplay(data.disk);
                
                // 更新最后更新时间
                document.getElementById('lpmuLastUpdate').textContent = new Date().toLocaleTimeString('zh-CN');
                document.getElementById('lpmuDataPackets').textContent = this.dataPacketCount;
            }

            updateCPUDisplay(cpuData) {
                if (!cpuData || !cpuData.cores) return;
                
                const content = document.getElementById('lpmuCpuContent');
                let html = '<div class="cpu-chart">';
                
                // 确保有8个核心，如果数据不足则补充空数据
                const cores = [];
                for (let i = 0; i < 8; i++) {
                    const coreData = cpuData.cores.find(core => core.id === i);
                    cores.push(coreData || { id: i, usage: 0, freq: 0 });
                }
                
                cores.forEach(core => {
                    const usage = parseFloat(core.usage) || 0;
                    const coreLabel = getTranslation('core', '核心');
                    
                    // 确保进度条有足够宽度显示文字，减小最小宽度
                    const barWidth = Math.max(usage, 15); // 减小到15%最小宽度
                    
                    html += `
                        <div class="cpu-bar-item">
                            <div class="cpu-bar-label">${coreLabel} ${core.id + 1}</div>
                            <div class="cpu-bar-container">
                                <div class="cpu-bar-fill" style="width: ${barWidth}%; min-width: 28px;">
                                    <div class="cpu-bar-value">${usage.toFixed(1)}%</div>
                                </div>
                            </div>
                        </div>
                    `;
                });
                
                html += '</div>';
                content.innerHTML = html;
            }

            updateMemoryDisplay(memoryData) {
                if (!memoryData) return;
                
                const content = document.getElementById('lpmuMemoryContent');
                let html = '<div class="memory-chart">';
                
                if (memoryData.ram) {
                    html += `
                        <div class="memory-item">
                            <div class="memory-metric">
                                <span class="memory-metric-label">RAM</span>
                                <span class="memory-metric-value">${memoryData.ram.used}/${memoryData.ram.total} ${memoryData.ram.unit}</span>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: ${memoryData.ram.percent}%">${memoryData.ram.percent.toFixed(1)}%</div>
                            </div>
                        </div>
                    `;
                }
                
                if (memoryData.swap) {
                    html += `
                        <div class="memory-item">
                            <div class="memory-metric">
                                <span class="memory-metric-label">SWAP</span>
                                <span class="memory-metric-value">${memoryData.swap.used}/${memoryData.swap.total} ${memoryData.swap.unit}</span>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: ${memoryData.swap.percent}%; min-width: 45px;">${memoryData.swap.percent.toFixed(1)}%</div>
                            </div>
                        </div>
                    `;
                }
                
                html += '</div>';
                const noDataText = getTranslation('no-memory-data', '暂无内存数据');
                content.innerHTML = html || `<div class="memory-chart"><div class="no-data">${noDataText}</div></div>`;
            }

            updateTemperatureDisplay(tempData) {
                if (!tempData) return;
                
                const content = document.getElementById('lpmuTemperatureContent');
                let html = '<div class="lpmu-temperature-grid">';
                
                // 遍历所有温度传感器
                Object.keys(tempData).forEach(key => {
                    const temp = tempData[key];
                    if (typeof temp === 'number') {
                        // 温度范围为0-100°C
                        const tempPercent = Math.max(0, Math.min((temp / 100) * 100, 100));
                        
                        // 计算颜色渐变：40°C以下绿色，40°C-100°C从绿色渐变到红色
                        let backgroundColor;
                        if (temp <= 40) {
                            backgroundColor = 'linear-gradient(90deg, #4CAF50, #45a049)';
                        } else {
                            // 40°C以上的温度渐变：从绿色到红色
                            const gradientPercent = Math.min((temp - 40) / (100 - 40), 1);
                            const red = Math.round(76 + (244 - 76) * gradientPercent);   // 从#4CAF50的76到#f44336的244
                            const green = Math.round(175 + (67 - 175) * gradientPercent); // 从#4CAF50的175到#f44336的67
                            const blue = Math.round(80 + (54 - 80) * gradientPercent);   // 从#4CAF50的80到#f44336的54
                            
                            const red2 = Math.round(69 + (211 - 69) * gradientPercent);  // 从#45a049的69到#d32f2f的211
                            const green2 = Math.round(160 + (47 - 160) * gradientPercent); // 从#45a049的160到#d32f2f的47
                            const blue2 = Math.round(73 + (47 - 73) * gradientPercent);  // 从#45a049的73到#d32f2f的47
                            
                            backgroundColor = `linear-gradient(90deg, rgb(${red}, ${green}, ${blue}), rgb(${red2}, ${green2}, ${blue2}))`;
                        }
                        
                        html += `
                            <div class="temp-item">
                                <div class="temp-label">${key}</div>
                                <div style="width: 100%; height: 20px; background-color: #e0e0e0; border-radius: 10px; overflow: hidden; position: relative; margin-top: 8px;">
                                    <div style="height: 100%; border-radius: 10px; transition: width 0.3s ease, background 0.3s ease; position: relative; min-width: 45px; width: ${tempPercent}%; background: ${backgroundColor};">
                                        <div style="font-size: 0.75rem; font-weight: bold; color: white; text-shadow: 1px 1px 2px rgba(0,0,0,0.5); position: absolute; right: 8px; top: 50%; transform: translateY(-50%); z-index: 2;">${temp.toFixed(1)}°C</div>
                                    </div>
                                </div>
                            </div>
                        `;
                    }
                });
                
                html += '</div>';
                content.innerHTML = html;
            }

            updateDiskDisplay(diskData) {
                if (!diskData) return;
                
                const content = document.getElementById('lpmuDiskContent');
                let html = '<div class="disk-grid">';
                
                // 遍历所有磁盘
                Object.keys(diskData).forEach(key => {
                    const disk = diskData[key];
                    if (disk && disk.percent !== undefined) {
                        html += `
                            <div class="disk-item">
                                <div class="disk-label">${key}</div>
                                <div class="progress-bar" style="margin: 8px 0;">
                                    <div class="progress-fill" style="width: ${disk.percent}%; position: relative; min-width: 45px;">
                                        <span style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%); color: white; font-size: 12px; font-weight: bold; text-shadow: 1px 1px 2px rgba(0,0,0,0.5); z-index: 2;">${disk.percent.toFixed(1)}%</span>
                                    </div>
                                </div>
                                <div class="disk-details">${disk.used}/${disk.total} ${disk.unit}</div>
                                <div class="disk-details">${disk.mountpoint || ''}</div>
                            </div>
                        `;
                    }
                });
                
                html += '</div>';
                content.innerHTML = html;
            }

            updateConnectionStatus(status, message) {
                const indicator = document.getElementById('lpmuStatusIndicator');
                const statusText = document.getElementById('lpmuStatusText');
                
                indicator.className = `status-indicator status-${status}`;
                statusText.textContent = message;
                
                // 保存当前状态用于语言切换时刷新
                this.currentStatus = status;
            }

            // 刷新连接状态显示（用于语言切换）
            refreshConnectionStatus() {
                if (this.currentStatus) {
                    let messageKey = '';
                    let fallbackMessage = '';
                    
                    switch(this.currentStatus) {
                        case 'connecting':
                            messageKey = 'connecting-application';
                            fallbackMessage = '正在连接到 应用服务器...';
                            break;
                        case 'connected':
                            messageKey = 'connected-application';
                            fallbackMessage = '已连接到 应用服务器';
                            break;
                        case 'disconnected':
                            messageKey = 'disconnected-application';
                            fallbackMessage = '应用服务器 连接已断开';
                            break;
                    }
                    
                    if (messageKey) {
                        const message = getTranslation(messageKey, fallbackMessage);
                        document.getElementById('lpmuStatusText').textContent = message;
                    }
                }
            }

            scheduleReconnect() {
                this.reconnectAttempts++;
                const delay = this.reconnectInterval;
                
                setTimeout(() => {
                    this.connect();
                }, delay);
            }

            startConnectionTimeUpdate() {
                setInterval(() => {
                    if (this.connectionStartTime) {
                        const duration = Math.floor((new Date() - this.connectionStartTime) / 1000);
                        const minutes = Math.floor(duration / 60);
                        const seconds = duration % 60;
                        document.getElementById('lpmuConnectionTime').textContent = 
                            `${minutes}:${seconds.toString().padStart(2, '0')}`;
                    } else {
                        document.getElementById('lpmuConnectionTime').textContent = '-';
                    }
                }, 1000);
            }
        }

        // 页面加载完成后初始化监控
        document.addEventListener('DOMContentLoaded', () => {
            // 初始化监控类并保存为全局变量以便语言切换时使用
            window.agxMonitor = new 推理服务器Monitor();
            window.应用服务器Monitor = new 应用服务器Monitor();
            
            // 添加滚动监听器来实现文字颜色渐变
            initScrollColorTransition();
            
            // 初始化语言系统
            initLanguageSystem();
        });

        // 语言翻译系统
        const translations = {
            'zh': {
                'title': 'RM - 01 Dashboard',
                'subtitle': 'RobOS ( Rack on board ) 实时系统性能监控面板',
                'connecting-inference': '正在连接到 推理服务器...',
                'connecting-application': '正在连接到 应用服务器...',
                'connected-inference': '已连接到 推理服务器',
                'connected-application': '已连接到 应用服务器',
                'disconnected-inference': '推理服务器 连接已断开',
                'disconnected-application': '应用服务器 连接已断开',
                'connection-error-inference': '推理服务器 连接错误',
                'connection-error-application': '应用服务器 连接错误',
                'inference-monitoring': '推理模组监控',
                'application-monitoring': '应用模组监控',
                'nvidia-status': 'NVIDIA 推理服务器系统状态',
                'intel-status': 'Intel X86 应用服务器系统状态',
                'cpu-monitoring': 'CPU 监控',
                'memory-monitoring': '显存监控',
                'ram-monitoring': '内存监控',
                'temperature-monitoring': '温度监控',
                'power-monitoring': '功耗监控',
                'gpu-monitoring': 'GPU 监控',
                'disk-monitoring': '磁盘监控',
                'system-info': '系统信息',
                'waiting-data': '等待数据...',
                'last-update': '最后更新',
                'connection-time': '连接时间',
                'data-packets': '数据包',
                'core': '核心',
                'system-5v': '系统 5V',
                'gpu-freq': '3D GPU 频率',
                'no-gpu-data': '暂无 GPU 数据',
                'no-memory-data': '暂无内存数据'
            },
            'en': {
                'title': 'RM - 01 Dashboard',
                'subtitle': 'RobOS ( Rack on board ) Real-time System Performance Monitor',
                'connecting-inference': 'Connecting to Inference Server...',
                'connecting-application': 'Connecting to Application Server...',
                'connected-inference': 'Connected to Inference Server',
                'connected-application': 'Connected to Application Server',
                'disconnected-inference': 'Inference Server Disconnected',
                'disconnected-application': 'Application Server Disconnected',
                'connection-error-inference': 'Inference Server Connection Error',
                'connection-error-application': 'Application Server Connection Error',
                'inference-monitoring': 'Inference Module Monitor',
                'application-monitoring': 'Application Module Monitor',
                'nvidia-status': 'NVIDIA Inference Server System Status',
                'intel-status': 'Intel X86 Application Server System Status',
                'cpu-monitoring': 'CPU Monitor',
                'memory-monitoring': 'VRAM Monitor',
                'ram-monitoring': 'Memory Monitor',
                'temperature-monitoring': 'Temperature Monitor',
                'power-monitoring': 'Power Monitor',
                'gpu-monitoring': 'GPU Monitor',
                'disk-monitoring': 'Disk Monitor',
                'system-info': 'System Information',
                'waiting-data': 'Waiting for data...',
                'last-update': 'Last Update',
                'connection-time': 'Connection Time',
                'data-packets': 'Data Packets',
                'core': 'Core',
                'system-5v': 'System 5V',
                'gpu-freq': '3D GPU Frequency',
                'no-gpu-data': 'No GPU Data Available',
                'no-memory-data': 'No Memory Data Available'
            }
        };

        let currentLanguage = 'zh';

        function initLanguageSystem() {
            // 从本地存储读取语言设置
            const savedLanguage = localStorage.getItem('dashboard-language');
            if (savedLanguage && translations[savedLanguage]) {
                currentLanguage = savedLanguage;
            }
            
            // 更新语言切换按钮显示
            updateLanguageSwitcher();
            
            // 如果是英文，立即翻译
            if (currentLanguage === 'en') {
                translatePage('en');
            }
        }

        function switchLanguage() {
            currentLanguage = currentLanguage === 'zh' ? 'en' : 'zh';
            localStorage.setItem('dashboard-language', currentLanguage);
            updateLanguageSwitcher();
            translatePage(currentLanguage);
        }

        function updateLanguageSwitcher() {
            const langText = document.getElementById('langText');
            if (langText) {
                langText.textContent = currentLanguage === 'zh' ? 'EN' : '中文';
            }
        }

        function translatePage(language) {
            const elements = document.querySelectorAll('[data-translate]');
            elements.forEach(element => {
                const key = element.getAttribute('data-translate');
                if (translations[language] && translations[language][key]) {
                    // 特殊处理连接状态文本，保持当前实际状态
                    if (key === 'connecting-inference' || key === 'connecting-application' || 
                        key === 'connected-inference' || key === 'connected-application' ||
                        key === 'disconnected-inference' || key === 'disconnected-application' ||
                        key === 'connection-error-inference' || key === 'connection-error-application') {
                        // 跳过连接状态文本的翻译，让Monitor类来管理这些状态
                        return;
                    }
                    element.textContent = translations[language][key];
                }
            });
            
            // 刷新各个监控器的连接状态显示
            if (window.agxMonitor && typeof window.agxMonitor.refreshConnectionStatus === 'function') {
                window.agxMonitor.refreshConnectionStatus();
            }
            if (window.应用服务器Monitor && typeof window.应用服务器Monitor.refreshConnectionStatus === 'function') {
                window.应用服务器Monitor.refreshConnectionStatus();
            }
            
            // 更新文档标题
            if (language === 'en') {
                document.title = 'RM-01 Dashboard - RobOS Monitor';
                document.querySelector('meta[name="apple-mobile-web-app-title"]').content = 'RM - 01 Monitor Panel';
            } else {
                document.title = 'Rob OS';
                document.querySelector('meta[name="apple-mobile-web-app-title"]').content = 'RM - 01 监控面板';
            }
        }

        function getTranslation(key, fallback = '') {
            if (translations[currentLanguage] && translations[currentLanguage][key]) {
                return translations[currentLanguage][key];
            }
            return fallback || key;
        }

        // 滚动颜色渐变功能
        function initScrollColorTransition() {
            const header = document.querySelector('.header');
            const headerH1 = document.querySelector('.header h1');
            const headerP = document.querySelector('.header p');
            const connectionStatus = document.querySelector('.connection-status');
            const connectionTexts = document.querySelectorAll('.connection-status span:not(.status-indicator)');
            const languageSwitcher = document.querySelector('.language-switcher');
            const langText = document.querySelector('.lang-text');
            
            // 计算10%滚动距离
            const maxScroll = window.innerHeight * 0.1;
            
            function updateTextColors() {
                // 使用多种方法获取滚动位置，确保移动端兼容性
                const scrollY = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
                
                // 计算渐变进度 (0-1)
                const progress = Math.min(scrollY / maxScroll, 1);
                
                // 从白色(255,255,255)渐变到#323232(50,50,50)
                const startColor = { r: 255, g: 255, b: 255 };
                const endColor = { r: 50, g: 50, b: 50 };
                
                const currentColor = {
                    r: Math.round(startColor.r + (endColor.r - startColor.r) * progress),
                    g: Math.round(startColor.g + (endColor.g - startColor.g) * progress),
                    b: Math.round(startColor.b + (endColor.b - startColor.b) * progress)
                };
                
                const colorValue = `rgb(${currentColor.r}, ${currentColor.g}, ${currentColor.b})`;
                
                // 应用颜色到各个元素
                if (header) header.style.color = colorValue;
                if (headerH1) {
                    headerH1.style.color = colorValue;
                    // 调整文字阴影透明度
                    const shadowOpacity = 0.3 * (1 - progress);
                    headerH1.style.textShadow = `2px 2px 4px rgba(0,0,0,${shadowOpacity})`;
                }
                if (headerP) headerP.style.color = colorValue;
                if (connectionStatus) connectionStatus.style.color = colorValue;
                
                // 更新语言切换按钮颜色
                if (languageSwitcher) languageSwitcher.style.color = colorValue;
                if (langText) langText.style.color = colorValue;
                
                // 更新连接状态文字颜色
                connectionTexts.forEach(text => {
                    if (text) text.style.color = colorValue;
                });
            }
            
            // 添加多种滚动事件监听器，确保移动端兼容性
            const options = { passive: true }; // 使用 passive 提高性能
            
            // 标准滚动事件
            window.addEventListener('scroll', updateTextColors, options);
            
            // iOS Safari 特殊处理
            document.addEventListener('scroll', updateTextColors, options);
            document.addEventListener('touchmove', updateTextColors, options);
            
            // 使用 requestAnimationFrame 优化性能
            let ticking = false;
            function requestTick() {
                if (!ticking) {
                    requestAnimationFrame(updateTextColors);
                    ticking = true;
                    setTimeout(() => { ticking = false; }, 16); // 60fps 限制
                }
            }
            
            // 触摸事件处理（移动端）
            window.addEventListener('touchstart', requestTick, options);
            window.addEventListener('touchmove', requestTick, options);
            window.addEventListener('touchend', requestTick, options);
            
            // 窗口大小变化时重新计算
            window.addEventListener('resize', () => {
                setTimeout(updateTextColors, 100);
            }, options);
            
            // 强制初始化颜色（延迟执行确保DOM完全加载）
            setTimeout(updateTextColors, 100);
            
            // 定期更新以确保状态正确（移动端备用方案）
            setInterval(updateTextColors, 500);
        }
    </script>
</body>
</html>
